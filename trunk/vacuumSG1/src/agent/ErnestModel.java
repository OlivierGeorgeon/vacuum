package agent;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.List;

import javax.vecmath.Matrix3f;
import javax.vecmath.Vector3f;

import memory.Colliculus;

import ernest.*;
import utils.Pair;
import spas.IPlace;
import tracing.*;

/**************************************
 * A Model for Ernest 
 * This class gathers methods that, we believe, will survive generations of Ernests.
 * @author ogeorgeon
 **************************************/
public class ErnestModel extends Model 
{

	public static int ACTION_FORWARD = 0;
	public static int ACTION_LEFT = 1;
	public static int ACTION_RIGHT = 2;
	
	public static int AGENT_STOP = 0;
	public static int AGENT_RUN = 1;
	public static int AGENT_STEP = 2;
	
	public int cognitiveMode = AGENT_STOP;

	/** The angular field of each eye. */
	private double m_eyeAngle ;
	protected void setEyeAngle(double angle) {m_eyeAngle = angle;}
	protected double getEyeAngle() {return m_eyeAngle;}
	
	/** Ernest's sensorymotor system. */
	protected IErnest m_ernest;
	protected ISensorymotorSystem m_sensorymotorSystem;
	protected ITracer m_tracer;

	/**
	 * Value of the diagonal projection in 2D:
	 * 1 for a square diagonal,
	 * 1/sqrt(2) for a circle diagonal.
	 */
	public final static float INV_SQRT_2 = (float) (1/Math.sqrt(2));
	final private float DIAG2D_PROJ = INV_SQRT_2;

	// Local directions
	final public Vector3f DIRECTION_AHEAD = new Vector3f(1, 0, 0);
	final public Vector3f DIRECTION_BEHIND = new Vector3f(-1, 0, 0);
	final public Vector3f DIRECTION_LEFT = new Vector3f(0, 1, 0);
	final public Vector3f DIRECTION_RIGHT = new Vector3f(0, -1, 0);
	final public Vector3f DIRECTION_AHEAD_LEFT = new Vector3f(DIAG2D_PROJ, DIAG2D_PROJ, 0);
	final public Vector3f DIRECTION_AHEAD_RIGHT = new Vector3f(DIAG2D_PROJ, -DIAG2D_PROJ, 0);
	final public Vector3f DIRECTION_BEHIND_LEFT = new Vector3f(-DIAG2D_PROJ, DIAG2D_PROJ, 0);
	final public Vector3f DIRECTION_BEHIND_RIGHT = new Vector3f(-DIAG2D_PROJ, -DIAG2D_PROJ, 0);	
	final public static float SOMATO_RADIUS = 1.1f;
	final public static float TACTILE_RADIUS = .8f;
	
	// Absolute directions in Cartesian coordinates (0,0) bottom left.
	final protected Vector3f DIRECTION_NORTH = new Vector3f(0, 1, 0);
	final protected Vector3f DIRECTION_NORTHEAST = new Vector3f(1, 1, 0);
	final protected Vector3f DIRECTION_EAST = new Vector3f(1, 0, 0);
	final protected Vector3f DIRECTION_SOUTHEAST = new Vector3f(1, -1, 0);
	final protected Vector3f DIRECTION_SOUTH = new Vector3f(0, -1, 0);
	final protected Vector3f DIRECTION_SOUTHWEST = new Vector3f(-1, -1, 0);
	final protected Vector3f DIRECTION_WEST = new Vector3f(-1, 0, 0);
	final protected Vector3f DIRECTION_NORTHWEST = new Vector3f(-1, 1, 0);
	
	public Colliculus colliculus;
	public InternalView m_eye;
	public int lastAction;
	
	public Vector3f mPreviousPosition = new Vector3f(mPosition);
	public Vector3f mPreviousOrientation = new Vector3f(mOrientation);
	
	public Vector3f mSpeedT;    // translation and rotation speed in absolute reference
	public Vector3f mSpeedR;    // translation and rotation speed in absolute reference
	
	public Vector3f mEgoSpeedT;    // translation and rotation speed in absolute reference
	
	public ErnestModel(int i) 
	{
		super(i);
		m_eye=new InternalView();
		mSpeedT=new Vector3f(0f,0f,0f);
		mSpeedR=new Vector3f(0f,0f,0f);
		
		mEgoSpeedT=new Vector3f(0f,0f,0f);
	}
	
	/**
	 * Initialize the Ernest agent.
	 */
	public void initErnest()
	{
		
	}
	
	public void closeErnest()
	{
		//m_tracer.close();
		mOrientation.z=(float) (Math.PI/2);
		m_ernest = null;
	}
	
	/**
	 * Update the agent when the environment is refreshed.
	 * (not necessarily a cognitive step for the agent).
	 */
	public void update()
	{
//		int[] intention = stepErnest(status);
//		status = enactSchema(intention);
	}
	
	/**
	 * Run Ernest one step
	 */
	public int[] stepErnest(boolean status)
	{

		// Sense the environment
		int [][] matrix = new int [2][1];
		
		//m_sensorymotorSystem.senseMatrix(matrix);
		
		//String intention = m_ernest.step(matrix);
		String intention = Character.toString((char)m_ernest.step(matrix)[0]);

		//return intention;
		return m_ernest.step(matrix);
	}
	
//	public boolean enactSchema(int[] schema)
//	{
//		return true;
//	}
	
	/**
	 * Trace an event generated by the user, typically: a mouse click to change a square on the grid.
	 * @param type The event's type.
	 * @param x The x coordinate on the grid.
	 * @param y The y coordinate on the grid.
	 */
	public void traceUserEvent(String type, int x, int y)
	{
		//Object element = m_tracer.newEvent("user", type, m_counter);
		//m_tracer.addSubelement(element, "x", x + "");
		//m_tracer.addSubelement(element, "y", y + "");
	}
	
	/**
	 * Generates a retina image from Ernest's view point.
	 * (Uses Ernest's orientationRad value, trigonometric, counterclockwise, radius).
	 * @return The array of colors projected onto the retina.
	 */ 
	protected Pair<Integer, Color>[] getRetina(double orientationRad) {
		@SuppressWarnings("unchecked")
		Pair<Integer, Color>[] retina = new Pair[Ernest.RESOLUTION_RETINA];
		double angle = orientationRad - Math.PI/2;
		double angleStep = Math.PI / Ernest.RESOLUTION_RETINA;
		for (int i = 0; i < Ernest.RESOLUTION_RETINA; i++) {
			retina[i] = scanArc((float)angle, (float)angleStep);
			angle += angleStep;
		}
		return retina;
	}
	
	/**
	 * Scan an arc from Ernest's viewpoint, starting from the initial angle position and going through the angular span.
	 * Stop scanning at the first singularity found.
	 * @param t The initial angular position (trigonometric/counterclockwise - radian)
	 * @param a The arc's angular span (trigonometric/counterclockwise)
	 * @param 20 The arc's diameter (the agent's visual range)
	 * @return the color detected. 
	 */
	protected Pair<Integer, Color> scanArc(float t, float a) {
		Pair<Integer, Color> eyeFixation = null;
		float step = a/2;
		for (float angle = t; angle <= t + a + .001; angle += step) {
			float x0 = (float) (mPosition.x + 20 * Math.cos(angle));
			float y0 = (float) (mPosition.y + 20 * Math.sin(angle)); // Y axis is downwards.
			//float y0 = (float) (m_y + 20 * Math.sin(angle)); // Y axis is upwards.
			eyeFixation = rayTrace(mPosition.x,mPosition.y, x0, y0);
			// We stop when we find a singularity.
			if (eyeFixation.mRight != WALL_COLOR)
				break;
		}
		if (eyeFixation==null)
			return Pair.create(Ernest.INFINITE, WALL_COLOR);
		return eyeFixation;
	}
	
	/**
	 * Scan the squares that are on a ray from a viewpoint to a target square
	 *  http://playtechs.blogspot.com/2007/03/raytracing-on-grid.html 
	 * @return Distance to the dirty square if any, Ernest.INFINITE if no dirt. 
	 */
	protected Pair<Integer, Color> rayTrace(float x0, float y0, float x1, float y1) {
		float dx = Math.abs(x1 - x0);
		float dy = Math.abs(y1 - y0);
	    int i = (int) Math.round(x0);
	    int j = (int) Math.round(y0);
	    int n = 1;
	    int i_inc, j_inc;
	    float error;
	    //int k = Math.round(mPosition.getZ());
	    float cornerTresh = .05f * dx * dy;

	    if (dx == 0) {
	        i_inc = 0;
	        error = Float.POSITIVE_INFINITY;
	    } else if (x1 > x0) {
	        i_inc = 1;
	        n += (int) Math.round(x1) - i;
	        error = (float) (((Math.round(x0) + .5f) - x0) * dy);
	    } else {
	        i_inc = -1;
	        n += i - (int) Math.round(x1);
	        error = (float) ((x0 - (Math.round(x0) - .5f)) * dy);
	    }
	    if (dy == 0) {
	        j_inc = 0;
	        error -= Float.POSITIVE_INFINITY;
	    } else if (y1 > y0) {
	        j_inc = 1;
	        n += (int) Math.round(y1) - j;
	        error -= ((Math.round(y0) + .5f) - y0) * dx;
	    } else {
	        j_inc = -1;
	        n += j - (int) Math.round(y1);
	        error -= (y0 - (Math.round(y0) - .5f)) * dx;
	    }
	    for (; n > 0; --n) 
	    {
	        // move on along the ray
	        if (error > cornerTresh) {
	            j += j_inc;
	            error -= dx;
	        } else if (error < -cornerTresh) {
	            i += i_inc;
	            error += dy;
	        } else {
	        	i += i_inc;
	    		j += j_inc;
	    		error += dy - dx;
	    		--n;
	        }

	        // Don't go outside the grid
	    	if ((i < 0) || (j < 0) || (i >= m_w) || (j >= m_h)) 
	    		return Pair.create(Ernest.INFINITE, WALL_COLOR);
	    	
	    	// Examine the block on the ray. Return wall or uninhibited dirty squares.
	    	Color bgc = m_env.m_blocks[i][j].seeBlock();
	    	if (m_env.isWall(i,j) || m_env.isFood(i,j) || m_env.isAlga(i,j))
	    	{
				int dist = (int) Math.sqrt(((i-x0)*(i-x0) + (j-y0)*(j-y0)) * Ernest.INT_FACTOR * Ernest.INT_FACTOR);
				return Pair.create(dist, bgc);
    		}
	    	if (m_env.isAgent(i, j, mName))
	    	{
				int dist = (int) Math.sqrt(((i-x0)*(i-x0) + (j-y0)*(j-y0)) * Ernest.INT_FACTOR * Ernest.INT_FACTOR);
				return Pair.create(dist, AGENT_COLOR);
	    	}

	    }
		return Pair.create(Ernest.INFINITE, WALL_COLOR);
	}

	/**
	 * Compute the tactile stimuli 
	 * @return The matrix of tactile stimuli. 
	 */
	protected int[] somatoMap() {
		int[] somatoMap = new int[9];
		somatoMap[0] = soma(DIRECTION_BEHIND_RIGHT);
		somatoMap[1] = soma(DIRECTION_RIGHT);
		somatoMap[2] = soma(DIRECTION_AHEAD_RIGHT);
		somatoMap[3] = soma(DIRECTION_AHEAD);
		somatoMap[4] = soma(DIRECTION_AHEAD_LEFT);
		somatoMap[5] = soma(DIRECTION_LEFT);
		somatoMap[6] = soma(DIRECTION_BEHIND_LEFT);
		somatoMap[7] = soma(DIRECTION_BEHIND);
		somatoMap[8] = soma(new Vector3f());

		return somatoMap;
	}
	/**
	 * Tactile stimuli. 
	 * @param direction The direction of the touch in Ernest's referential.
	 * @return The tactile stimulus in this direction. 
	 */
	protected int soma(Vector3f direction) {
		int soma = Ernest.STIMULATION_TOUCH_EMPTY;
		Vector3f localPoint = new Vector3f(direction);
		localPoint.scale(SOMATO_RADIUS);
		Vector3f point = localToParentRef(localPoint);
		if (affordTouchSoft(point))
			soma = Ernest.STIMULATION_TOUCH_SOFT;
		if (affordEat(point))
			soma = Ernest.STIMULATION_TOUCH_FISH;
		if (!affordWalk(point)) 
			soma = Ernest.STIMULATION_TOUCH_WALL;
		return soma;
	}
	/**
	 * @param localVec A position relative to Ernest.
	 * @return The absolute position relative to the board ((rotZ(mOrientation.z) * localVec) + mPosition). 
	 */
	public Vector3f localToParentRef(Vector3f localVec) {
		
		Matrix3f rot = new Matrix3f();
		rot.rotZ(mOrientation.z);
		
		Vector3f parentVec = new Vector3f();
		rot.transform(localVec, parentVec); // (rot * localVec) is placed into parentVec
		//parentVec.add(new Vector3f(m_x, m_y, 0));
		parentVec.add(mPosition); // now parentVec = (rotZ(mOrientation.z) * localVec) + mPosition.
		return parentVec;
	}	
	
	/**
	 * Ernest's 
	 */
	public void ernestDynamic()
	{
		mTranslation.scale(.9f);
		mPosition.add(mTranslation);
		//m_x = mPosition.x;
		//m_y = m_h - mPosition.y;
		
		mRotation.scale(.9f);
		mOrientation.add(mRotation);
	}
	
	public Vector3f cellCenter(Vector3f position)
	{
		Vector3f cellCenter = new Vector3f(Math.round(position.x), Math.round(position.y), Math.round(position.z));
		return cellCenter;
	}

	public void keepDistance(Vector3f position, Vector3f point, float distance)
	{
		if (point != null)
		{
			Vector3f toPoint = new Vector3f(point);
			toPoint.sub(position);
			if (toPoint.length() < distance)
			{
				//position.add(toPoint);
				position.set(point);
				toPoint.normalize();
				toPoint.scale(- distance);
				position.add(toPoint);
			}
		}
	}
	
	public List<IPlace> getPlaceList(){
		return m_ernest.getPlaceList();
	}
	
	
	
	
	//******************************************
	////////////////////////////////////////////
	//******************************************
	
	protected EyeFixation[] rendu(){
		return rendu(false,0);
	}
	
	
	protected EyeFixation[] rendu(boolean sensor,float speed){
		double[] rv    = new double[360];          // visual distance vector (absolute orientation)
		double[] rv2   = new double[360];          // visual distance vector (agent orientation)
		double[] rt    = new double[360];          // tactile distance vector (absolute orientation)
		double[] rt2   = new double[360];          // tactile distance vector (agent orientation)
		
		double[] zVMap = new double[360];          // visual  Z-Map
		double[] zTMap = new double[360];          // tactile Z-Map
		
		Color[] colorMap =new Color[360];          // color vector (absolute orientation)
		Color[] colorMap2=new Color[360];          // color vector (agent orientation)
		int[] tactileMap =new int[360];            // tactile property vector (absolute orientation)
		int[] tactileMap2=new int[360];            // tactile property vector (agent orientation)
		
		int[] cornerV = new int[360];              // visual corner vector
		int[] cornerV2= new int[360];
		int[] cornerT = new int[360];              // tactile corner vector
		int[] cornerT2= new int[360];
		
		ArrayList<Vector3f> cornersPoints=new ArrayList<Vector3f>();
		
		EyeFixation[] retina= new EyeFixation[Ernest.RESOLUTION_RETINA];
		
		double d=0;
		double d1,d2,d3,d4;
		double a1,a2,a3,a4;
		
		double imin,iplus,jmin,jplus;
		double imin2,jmin2;
		
		int Im_x=Math.round(mPosition.x);
		int Im_y=Math.round(mPosition.y);
		
		
		// reset vectors
		for (int i=0;i<360;i++){
			zVMap[i]=1000;
			zTMap[i]=1000;
			rv[i]=200;
			rt[i]=200;
			colorMap[i]=new Color(0,0,0);
			tactileMap[i]=0;
		}
		
		int sight=20;                                              // maximum distance
		
		
		// the area around the agent is divided into five parts
		// 4 4 4 4 5 1 1 1 1
		// 4 4 4 4 5 1 1 1 1
		// 4 4 4 4 5 1 1 1 1
		// 3 3 3 3 A 1 1 1 1
		// 3 3 3 3 2 2 2 2 2
		// 3 3 3 3 2 2 2 2 2
		// 3 3 3 3 2 2 2 2 2

		
		for (int i=0;i<sight;i++){
			for (int j=0;j<sight;j++){
				
				// (1) cells on the top right side
				if ( (i>0)&& (Im_x+i<m_w) && (Im_y+j<m_h) ){
					if (!m_env.isEmpty(Im_x+i,Im_y+j) ){
						// determine color and tactile property of a block
						Color bgc = m_env.seeBlock(Im_x+i,Im_y+j);
						int tactile=m_env.touchBlock(Im_x+i,Im_y+j);
						
						// determine the position of the three visible points of the block in polar reference
						imin =(double)i-0.5 - (mPosition.x-Im_x);
						imin2=imin*imin;
						iplus=(double)i+0.5 - (mPosition.x-Im_x);
						jmin =(double)j-0.5 - (mPosition.y-Im_y);
						jmin2=jmin*jmin;
						jplus=(double)j+0.5 - (mPosition.y-Im_y);
						
						d1=  imin2 + jmin2;
						d1=Math.sqrt(d1);
						d2=  imin2 + (jplus*jplus);
						d2=Math.sqrt(d2);
						d3=  (iplus*iplus) + jmin2;
						d3=Math.sqrt(d3);
						
						a1=  Math.toDegrees( Math.acos( jmin/d1));
						a2=  Math.toDegrees( Math.acos( jplus/d2));
						a3=  Math.toDegrees( Math.acos( jmin/d3));
						
						
				    	int ai1=(int)a1;
				    	int ai2=(int)a2;
				    	int ai3=(int)a3;
						
				    	// fill the output vectors with the first visible segment
						for (int k=ai2;k<=ai1;k++){
							d= d2*10 +   (d1-d2)*10*(k-ai2)/(ai1-ai2);
							// visual vector if the block is visible
							if (m_env.isVisible(Im_x+i,Im_y+j)){
								if (zVMap[k]>d){
									rv[k]=d;                        // fill Z-Map
									zVMap[k]= d;
									colorMap[k]=bgc;
									cornerV[k]=0;
									
									if      (k==ai2){
										if (Im_y+j+1<m_h){
											if ( !(m_env.isVisible(Im_x+i,Im_y+j+1))
										       || (m_env.isVisible(Im_x+i-1,Im_y+j+1)) ){
											
												cornerV[k]=1;
											}
										}
									}
									else if (k==ai1){
										if (Im_y+j-1>=0){
											if ( ( m_env.isVisible(Im_x+i-1,Im_y+j) &&  m_env.isVisible(Im_x+i,Im_y+j-1) )
											   ||(!m_env.isVisible(Im_x+i-1,Im_y+j) && !m_env.isVisible(Im_x+i,Im_y+j-1) ) ){
											
												cornerV[k]=2;
											}
										}
									}

								}
							}
							// tactile vector
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]= d;
								tactileMap[k]=tactile;
								if      (k==ai2) cornerT[k]=1;
								else if (k==ai1) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}	
						// fill the output vectors with the second visible segment
						for (int k=ai1;k<=ai3;k++){
							d= d1*10 +   (d3-d1)*10*(k-ai1)/(ai3-ai1);
							// visual vector if the block is visible
							if (m_env.isVisible(Im_x+i,Im_y+j)){
								if (zVMap[k]>d){
									rv[k]=d;
									zVMap[k]= d;
									colorMap[k]=bgc;
									if      (k==ai1) cornerV[k]=1;
									else if (k==ai3) cornerV[k]=2;
									else             cornerV[k]=0;
									
									cornerV[k]=0;
									
									if      (k==ai1){
										if (Im_y+j+1<m_h){
											if ( ( m_env.isVisible(Im_x+i-1,Im_y+j) &&  m_env.isVisible(Im_x+i,Im_y+j-1) )
											   ||(!m_env.isVisible(Im_x+i-1,Im_y+j) && !m_env.isVisible(Im_x+i,Im_y+j-1) ) ){
											
												cornerV[k]=1;
											}
										}
									}
									else if (k==ai3){
										if (Im_y+j-1>=0 && Im_x+i+1<m_w){
											if ( !(m_env.isVisible(Im_x+i+1,Im_y+j))
											   || (m_env.isVisible(Im_x+i+1,Im_y+j-1)) ){
											
												cornerV[k]=2;
											}
										}
									}
								}
							}
							// tactile vector
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]= d;
								tactileMap[k]=tactile;
								if      (k==ai1) cornerT[k]=1;
								else if (k==ai3) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}
						
					}
				}

				// (2) cells on the bottom right side
				if ( (j>0) && (Im_x+i<m_w) && (Im_y-j>=0) ){
					if (!m_env.isEmpty(Im_x+i,Im_y-j) ){
						Color bgc = m_env.seeBlock(Im_x+i,Im_y-j);
						int tactile=m_env.touchBlock(Im_x+i,Im_y-j);
						
						
						
						imin =(double)i-0.5 - (mPosition.x-Im_x);
						imin2=imin*imin;
						iplus=(double)i+0.5 - (mPosition.x-Im_x);
						jmin =(double)j-0.5 + (mPosition.y-Im_y);
						jmin2=jmin*jmin;
						jplus=(double)j+0.5 + (mPosition.y-Im_y);
						
						d1=  imin2 + jmin2;
						d1=Math.sqrt(d1);
						d2=  (iplus*iplus) + jmin2;
						d2=Math.sqrt(d2);
						d3=  imin2 + (jplus*jplus);
						d3=Math.sqrt(d3);
						
						a1=  Math.toDegrees( Math.acos( jmin/d1));
						a2=  Math.toDegrees( Math.acos( jmin/d2));
						a3=  Math.toDegrees( Math.acos( jplus/d3));
						
				    	int ai1,ai2,ai3;
				    	
				    	if (i-0.5>=0){
				    		ai1=180-(int)a1;
				    		ai3=180-(int)a3;
				    	}
				    	else{
				    		ai1=180+(int)a1;
				    		ai3=180+(int)a3;
				    	}
				    	ai2=180-(int)a2;
						
						for (int k=ai2;k<=ai1;k++){
							d= ( d2*10 +   (d1-d2)*10*(k-ai2)/(ai1-ai2));
							if (m_env.isVisible(Im_x+i,Im_y-j)){
								if (zVMap[k]>d){
									rv[k]=d;
									zVMap[k]= d;
									colorMap[k]=bgc;
									cornerV[k]=0;
									
									if      (k==ai2){
										if (Im_x+i+1<m_w){
											if ( !(m_env.isVisible(Im_x+i+1,Im_y-j))
										       || (m_env.isVisible(Im_x+i+1,Im_y-j+1)) ){
											
												cornerV[k]=1;
											}
										}
									}
									else if (k==ai1){
										if (Im_x+i-1>=0){
											if ( ( m_env.isVisible(Im_x+i-1,Im_y-j) &&  m_env.isVisible(Im_x+i,Im_y-j+1) )
											   ||(!m_env.isVisible(Im_x+i-1,Im_y-j) && !m_env.isVisible(Im_x+i,Im_y-j+1) ) ){
											
												cornerV[k]=2;
											}
										}
									}
									
								}
							}
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]= d;
								tactileMap[k]=tactile;
							
								if      (k==ai2) cornerT[k]=1;
								else if (k==ai1) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}		
						for (int k=ai1;k<=ai3;k++){
							d= ( d1*10 +   (d3-d1)*10*(k-ai1)/(ai3-ai1));
							if (m_env.isVisible(Im_x+i,Im_y-j)){
								if (zVMap[k]>d){
									rv[k]=d;
									zVMap[k]= d;
									colorMap[k]=bgc;
									if      (k==ai1) cornerV[k]=1;
									else if (k==ai3) cornerV[k]=2;
									else             cornerV[k]=0;
									
									cornerV[k]=0;
									
									if      (k==ai3){
										if (Im_y+j-1>=0){
											if ( !(m_env.isVisible(Im_x+i,Im_y-j-1))
										       || (m_env.isVisible(Im_x+i-1,Im_y-j-1)) ){
											
												cornerV[k]=2;
											}
										}
									}
									else if (k==ai1){
										if (Im_y+j-1>=0){
											if ( ( m_env.isVisible(Im_x+i-1,Im_y-j) &&  m_env.isVisible(Im_x+i,Im_y-j-1) )
											   ||(!m_env.isVisible(Im_x+i-1,Im_y-j) && !m_env.isVisible(Im_x+i,Im_y-j-1) ) ){
											
												cornerV[k]=1;
											}
										}
									}
								}
							}
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]= d;
								tactileMap[k]=tactile;
							
								if      (k==ai1) cornerT[k]=1;
								else if (k==ai3) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}
					}
				}
				
				// (3) cells on the bottom left side
				if ( (i>0) && (Im_x-i>=0) && (Im_y-j>=0) ){
					if (!m_env.isEmpty(Im_x-i,Im_y-j) ){
						Color bgc = m_env.seeBlock(Im_x-i,Im_y-j);
						int tactile=m_env.touchBlock(Im_x-i,Im_y-j);
						
						imin =(double)i-0.5 + (mPosition.x-Im_x);
						imin2=imin*imin;
						iplus=(double)i+0.5 + (mPosition.x-Im_x);
						jmin =(double)j-0.5 + (mPosition.y-Im_y);
						jmin2=jmin*jmin;
						jplus=(double)j+0.5 + (mPosition.y-Im_y);
						
						d1=  imin2 + jmin2;
						d1=Math.sqrt(d1);
						d2=  imin2 + (jplus*jplus);
						d2=Math.sqrt(d2);
						d3=  (iplus*iplus) + jmin2;
						d3=Math.sqrt(d3);
						
						a1=  Math.toDegrees( Math.acos( jmin/d1));
						a2=  Math.toDegrees( Math.acos( jplus/d2));
						a3=  Math.toDegrees( Math.acos( jmin/d3));
						
				    	int ai1=180+(int)a1;
				    	int ai2=180+(int)a2;
				    	int ai3=180+(int)a3;
						
						for (int k=ai2;k<=ai1;k++){
							d=   d2*10 +   (d1-d2)*10*(k-ai2)/(ai1-ai2);
							if (m_env.isVisible(Im_x-i,Im_y-j)){
								if (zVMap[k]>d){
									rv[k]=d;
									zVMap[k]=d;
									colorMap[k]=bgc;
									cornerV[k]=0;
									
									if      (k==ai2){
										if (Im_x-i-1>=0){
											if ( !(m_env.isVisible(Im_x-i,Im_y-j-1))
										       || (m_env.isVisible(Im_x-i+1,Im_y-j-1)) ){
											
												cornerV[k]=1;
											}
										}
									}
									else if (k==ai1){
										if (Im_y+j+1<m_h){
											if ( ( m_env.isVisible(Im_x-i,Im_y+j) &&  m_env.isVisible(Im_x-i+1,Im_y-j) )
											   ||(!m_env.isVisible(Im_x-i,Im_y+j) && !m_env.isVisible(Im_x-i+1,Im_y-j) ) ){
											
												cornerV[k]=2;
											}
										}
									}
								}
							}
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]=d;
								tactileMap[k]=tactile;
								if      (k==ai2) cornerT[k]=1;
								else if (k==ai1) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}		
						for (int k=ai1;k<=ai3;k++){
							d=  d1*10 +   (d3-d1)*10*(k-ai1)/(ai3-ai1);
							if (m_env.isVisible(Im_x-i,Im_y-j)){
								if (zVMap[k]>d){
									rv[k]=d;
									zVMap[k]=d;
									colorMap[k]=bgc;
									cornerV[k]=0;
									
									if      (k==ai3){
										if (Im_x-i-1>=0){
											if ( !(m_env.isVisible(Im_x-i-1,Im_y-j))
										       || (m_env.isVisible(Im_x-i-1,Im_y-j+1)) ){
											
												cornerV[k]=2;
											}
										}
									}
									else if (k==ai1){
										if (Im_y+j+1<m_h){
											if ( ( m_env.isVisible(Im_x-i,Im_y+j) &&  m_env.isVisible(Im_x-i+1,Im_y-j) )
											   ||(!m_env.isVisible(Im_x-i,Im_y+j) && !m_env.isVisible(Im_x-i+1,Im_y-j) ) ){
											
												cornerV[k]=1;
											}
										}
									}
								}
							}
							if (zTMap[k]>d){
								rt[k]=d;
								zTMap[k]=d;
								tactileMap[k]=tactile;
								if      (k==ai1) cornerT[k]=1;
								else if (k==ai3) cornerT[k]=2;
								else             cornerT[k]=0;
							}
						}
						
					}
				}
				
				// (5) cells exactly on the top
				// In this case, there is only two visible points and one visible segment
				if ( (j>0) && (i==0) && (Im_y+j<m_h) ){
					if (!m_env.isEmpty(Im_x-i,Im_y+j) ){
						Color bgc = m_env.seeBlock(Im_x-i,Im_y+j);
						int tactile=m_env.touchBlock(Im_x-i,Im_y+j);
						
						imin =(double)i-0.5 + (mPosition.x-Im_x);
						imin2=imin*imin;
						iplus=(double)i+0.5 + (mPosition.x-Im_x);
						jmin =(double)j-0.5 - (mPosition.y-Im_y);
						jmin2=jmin*jmin;
						
						d1=  imin2 + jmin2;
						d1=Math.sqrt(d1);
						d2=  (iplus*iplus) + jmin2;
						d2=Math.sqrt(d2);
						
						a1=  Math.toDegrees( Math.acos( jmin/d1));
						a2=  Math.toDegrees( Math.acos( jmin/d2));

						
						int ai1,ai2;
						ai1=(int)a1;
				    	ai2=360-(int)a2;
				    	if (ai2==360) ai2=359;
				    	
				    	int count=0;
				    	for (int k=ai2;k<360;k++){
				    		d= d2*10 +   (d1-d2)*10*(k-ai2)/((ai1-ai2+360)%360);
				    		if (m_env.isVisible(Im_x-i,Im_y+j)){
				    			if (zVMap[k]>d){
				    				rv[k]=d;
				    				zVMap[k]= d;
				    				colorMap[k]=bgc;
				    				cornerV[k]=0;
									
									if  (k==ai2){
										if (Im_x-i-1>=0){
											if ( !(m_env.isVisible(Im_x-i-1,Im_y+j))
										       || (m_env.isVisible(Im_x-i-1,Im_y+j-1)) ){
											
												cornerV[k]=1;
											}
										}
									}
				    			}
				    		}
				    		if (zTMap[k]>d){
			    				rt[k]=d;
			    				zTMap[k]= d;
			    				tactileMap[k]=tactile;
			    				if      (k==ai2) cornerT[k]=1;
			    				else             cornerT[k]=0;
			    			}
				    		count++;
				    	}
				    	for (int k=0;k<=ai1;k++){
				    		d= d2*10 +   (d1-d2)*10*(k+count)/((ai1-ai2+360)%360);
				    		if (m_env.isVisible(Im_x-i,Im_y+j)){
				    			if (zVMap[k]>d){
				    				rv[k]=d;
				    				zVMap[k]= d;
				    				colorMap[k]=bgc;
				    				cornerV[k]=0;
									
									if  (k==ai1){
										if (Im_x-i+1<m_w){
											if ( !(m_env.isVisible(Im_x-i+1,Im_y+j))
										       || (m_env.isVisible(Im_x-i+1,Im_y+j-1)) ){
											
												cornerV[k]=1;
											}
										}
									}
				    			}
				    		}
				    		if (zTMap[k]>d){
			    				rt[k]=d;
			    				zTMap[k]= d;
			    				tactileMap[k]=tactile;
			    				if (k==ai1) cornerT[k]=2;
			    				else        cornerT[k]=0;	
			    			}
				    	}
					}
				}
				
				// (4) cells on the top left side
				if ( (j>0) && (i>0) && (Im_x-i>=0) && (Im_y+j<m_h) ){
					if (!m_env.isEmpty(Im_x-i,Im_y+j) ){
						Color bgc = m_env.seeBlock(Im_x-i,Im_y+j);
						int tactile=m_env.touchBlock(Im_x-i,Im_y+j);
						
						imin =(double)i-0.5 + (mPosition.x-Im_x);
						imin2=imin*imin;
						iplus=(double)i+0.5 + (mPosition.x-Im_x);
						jmin =(double)j-0.5 - (mPosition.y-Im_y);
						jmin2=jmin*jmin;
						jplus=(double)j+0.5 - (mPosition.y-Im_y);
						
						d1=  imin2 + jmin2;
						d1=Math.sqrt(d1);
						d2=  (iplus*iplus) + jmin2;
						d2=Math.sqrt(d2);
						d3=  imin2 + (jplus*jplus);
						d3=Math.sqrt(d3);
						
						a1=  Math.toDegrees( Math.acos( jmin/d1));
						a2=  Math.toDegrees( Math.acos( jmin/d2));
						a3=  Math.toDegrees( Math.acos( jplus/d3));
						
						int ai1,ai2,ai3;
						ai1=360-(int)a1;
						ai3=360-(int)a3;
						if (ai1==360) ai1=359;
						if (ai3==360) ai3=359;
				    	ai2=360-(int)a2;
						
				    	for (int k=ai2;k<=ai1;k++){
				    		d= d2*10 +   (d1-d2)*10*(k-ai2)/(ai1-ai2);
				    		if (m_env.isVisible(Im_x-i,Im_y+j)){
				    			if (zVMap[k]>d){
				    				rv[k]=d;
				    				zVMap[k]= d;
				    				colorMap[k]=bgc;
				    				cornerV[k]=0;
									
									if      (k==ai2){
										if (Im_x-i-1>=0){
											if ( !(m_env.isVisible(Im_x-i-1,Im_y+j))
										       || (m_env.isVisible(Im_x-i-1,Im_y+j-1)) ){
											
												cornerV[k]=1;
											}
										}
									}
									else if (k==ai1){
										if (Im_x-i+1<m_w){
											if ( ( m_env.isVisible(Im_x-i,Im_y+j-1) &&  m_env.isVisible(Im_x-i+1,Im_y+j) )
											   ||(!m_env.isVisible(Im_x-i+1,Im_y+j) && !m_env.isVisible(Im_x-i+1,Im_y+j) ) ){
											
												cornerV[k]=2;
											}
										}
									}
				    			}
				    		}
				    		if (zTMap[k]>d){
			    				rt[k]=d;
			    				zTMap[k]= d;
			    				tactileMap[k]=tactile;
			    				if      (k==ai2) cornerT[k]=1;
			    				else if (k==ai1) cornerT[k]=2;
			    				else             cornerT[k]=0;
			    			}
				    	}		
				    	for (int k=ai1;k<=ai3;k++){
				    		d= d1*10 +   (d3-d1)*10*(k-ai1)/(ai3-ai1);
				    		if (m_env.isVisible(Im_x-i,Im_y+j)){
				    			if (zVMap[k]>d-0.01){
				    				rv[k]=d;
				    				zVMap[k]=d;
				    				colorMap[k]=bgc;
				    				cornerV[k]=0;
									
									if      (k==ai3){
										if (Im_y+j+1<m_h){
											if ( !(m_env.isVisible(Im_x-i,Im_y+j+1))
										       || (m_env.isVisible(Im_x-i+1,Im_y+j+1)) ){
											
												cornerV[k]=2;
											}
										}
									}
									else if (k==ai1){
										if (Im_x-i+1<m_w){
											if ( ( m_env.isVisible(Im_x-i,Im_y+j-1) &&  m_env.isVisible(Im_x-i+1,Im_y+j) )
											   ||(!m_env.isVisible(Im_x-i,Im_y+j-1) && !m_env.isVisible(Im_x-i+1,Im_y+j) ) ){
											
												cornerV[k]=1;
											}
										}
									}
				    			}
				    		}
				    		if (zTMap[k]>d-0.01){
			    				rt[k]=d;
			    				zTMap[k]=d;
			    				tactileMap[k]=tactile;
			    				if      (k==ai1) cornerT[k]=1;
			    				else if (k==ai3) cornerT[k]=2;
			    				else             cornerT[k]=0;
			    			}
				    	}
						
					}
				}
				
				
				// agents detection
				for (int a=0;a<m_env.m_modelList.size();a++){
					Color bgc = m_env.AGENT;
					int tactile=m_env.CUDDLE;
					if (a!=ident){
						d= (mPosition.x-m_env.m_modelList.get(a).mPosition.x)*(mPosition.x-m_env.m_modelList.get(a).mPosition.x)
						  +(mPosition.y-m_env.m_modelList.get(a).mPosition.y)*(mPosition.y-m_env.m_modelList.get(a).mPosition.y);
						d=Math.sqrt(d);
						
						int ai1=0;
						int ai2=0;
						int ai3=0;
						int ai4=0;
						if (mPosition.x-m_env.m_modelList.get(a).mPosition.x<=0){
							a1=Math.toDegrees( Math.acos( (mPosition.y-m_env.m_modelList.get(a).mPosition.y)/d));
							ai1=180-(int)a1;
						}
						else{
							a1=Math.toDegrees( Math.acos( (mPosition.y-m_env.m_modelList.get(a).mPosition.y)/d));
							ai1=(int)a1+180;
						}
						
						a2=Math.atan(0.4/d);
						a2=Math.toDegrees(a2);
						
						ai2= (int)a2;
						
						ai3=ai1-ai2+360;
						ai4=ai1+ai2+360;
						
						int ai5=ai4-ai3;
						
						for (int k=ai3;k<ai4;k++){
							if (zVMap[k%360]>d*10){
								rv[k%360]=d*10 - 2*Math.sin(Math.PI*(k-ai3)/(ai4-ai3));
								zVMap[k%360]= d*10- 2*Math.sin(Math.PI*(k-ai3)/(ai4-ai3));
								colorMap[k%360]=bgc;
							}
							
							if (zTMap[k%360]>d*10){
								rt[k%360]=d*10 - 2*Math.sin(Math.PI*(k-ai3)/(ai4-ai3));
								zTMap[k%360]= d*10- 2*Math.sin(Math.PI*(k-ai3)/(ai4-ai3));
								tactileMap[k%360]=m_env.CUDDLE;
							}
						}
						
						cornerV[ai3%360]=1;
						cornerV[ai4%360]=2;
					}
				}
				
				
			}
		}
		
		
		// fill the output vectors (agent orientation)
		int orientationDeg= (int)(mOrientation.z * 180 / Math.PI);
		for (int i=0;i<360;i++){
			int offset=(i-orientationDeg+630)%360;
			rv2[i]= rv[offset];
			colorMap2[i]=colorMap[offset];
			cornerV2[i]=cornerV[offset];
			
			if (!colorMap[offset].equals(colorMap[(offset-1+360)%360]) ){
				cornerV2[i]=1;
			}
			
			rt2[i]= rt[offset];
			tactileMap2[i]=tactileMap[offset];
			cornerT2[i]=cornerT[offset];
		}
		
		// determine points of interest
		for (int i=0;i<360;i++){
			if (cornerV2[i]>0){
				cornersPoints.add(new Vector3f( (float)(rv2[i]*Math.cos((i+90)*Math.PI/180)) ,
						                        (float)(rv2[i]*Math.sin((i+90)*Math.PI/180)) ,
						                        i ) );
			}
		}
		
		// fill the retina vector
		for (int i=0;i<Ernest.RESOLUTION_RETINA;i++){
			retina[Ernest.RESOLUTION_RETINA-i-1]= new EyeFixation();
			retina[Ernest.RESOLUTION_RETINA-i-1].setColor(colorMap2[(int)(i*180/Ernest.RESOLUTION_RETINA+180/Ernest.RESOLUTION_RETINA/2+90)]);
			retina[Ernest.RESOLUTION_RETINA-i-1].setDistance((int) rv2[(int)(i*180/Ernest.RESOLUTION_RETINA+180/Ernest.RESOLUTION_RETINA/2+90)]);
		}
		
		// update colliculus
		if (sensor){
			colliculus.update(rv2, colorMap2, rt2, tactileMap2, lastAction, speed);
			//colliculusFrame.saveImage();
			//m_env.saveImage();
		}
		
		// update eye display
		Matrix3f rot = new Matrix3f();
		rot.rotZ(- mOrientation.z + (float)Math.PI/2);
		rot.transform(mSpeedT, mEgoSpeedT);
		
		m_eye.updateRetine(rv2,colorMap2,cornerV2,rt2,tactileMap2,cornerT2,cornersPoints,mEgoSpeedT,mSpeedR);
		
		// update display panel
		if (display){
			int size=m_env.frameList.size();
			for (int i=0;i<size;i++){
				if (m_env.frameList.get(i).getClass().getName().equals("agent.EyeView")){
					m_env.frameList.get(i).repaint();
				}
			}
			
		}
		
		return retina;
	}
}
